# coding: utf-8

"""
    Recomax REST API

    Recomax REST API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@recomax.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'params': 'dict(str, str)',
        'rel': 'str',
        'rels': 'list[str]',
        'title': 'str',
        'type': 'str',
        'uri': 'URI',
        'uri_builder': 'UriBuilder'
    }

    attribute_map = {
        'params': 'params',
        'rel': 'rel',
        'rels': 'rels',
        'title': 'title',
        'type': 'type',
        'uri': 'uri',
        'uri_builder': 'uriBuilder'
    }

    def __init__(self, params=None, rel=None, rels=None, title=None, type=None, uri=None, uri_builder=None, _configuration=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._params = None
        self._rel = None
        self._rels = None
        self._title = None
        self._type = None
        self._uri = None
        self._uri_builder = None
        self.discriminator = None

        if params is not None:
            self.params = params
        if rel is not None:
            self.rel = rel
        if rels is not None:
            self.rels = rels
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri
        if uri_builder is not None:
            self.uri_builder = uri_builder

    @property
    def params(self):
        """Gets the params of this Link.  # noqa: E501


        :return: The params of this Link.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Link.


        :param params: The params of this Link.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def rel(self):
        """Gets the rel of this Link.  # noqa: E501


        :return: The rel of this Link.  # noqa: E501
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this Link.


        :param rel: The rel of this Link.  # noqa: E501
        :type: str
        """

        self._rel = rel

    @property
    def rels(self):
        """Gets the rels of this Link.  # noqa: E501


        :return: The rels of this Link.  # noqa: E501
        :rtype: list[str]
        """
        return self._rels

    @rels.setter
    def rels(self, rels):
        """Sets the rels of this Link.


        :param rels: The rels of this Link.  # noqa: E501
        :type: list[str]
        """

        self._rels = rels

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501


        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.


        :param title: The title of this Link.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Link.  # noqa: E501


        :return: The type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.


        :param type: The type of this Link.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Link.  # noqa: E501


        :return: The uri of this Link.  # noqa: E501
        :rtype: URI
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Link.


        :param uri: The uri of this Link.  # noqa: E501
        :type: URI
        """

        self._uri = uri

    @property
    def uri_builder(self):
        """Gets the uri_builder of this Link.  # noqa: E501


        :return: The uri_builder of this Link.  # noqa: E501
        :rtype: UriBuilder
        """
        return self._uri_builder

    @uri_builder.setter
    def uri_builder(self, uri_builder):
        """Sets the uri_builder of this Link.


        :param uri_builder: The uri_builder of this Link.  # noqa: E501
        :type: UriBuilder
        """

        self._uri_builder = uri_builder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Link):
            return True

        return self.to_dict() != other.to_dict()
